version: 2

models:
  - name: dim_trade_month
    description: |
      Trade calendar month dimension table containing one row per trade month per pattern, derived from dim_trade_date for consistency.
      Provides month-level aggregations and attributes for retail/trade calendar analysis at monthly granularity.
      
      Since trade calendar patterns have different week allocations per month, each pattern creates different month boundaries.
      This model includes all three patterns (445, 454, 544) with separate records for each pattern combination.
      
      Column naming follows CDC standards:
      - _dt for dates/timestamps
      - _num for numbers
      - _flg for boolean flags
      - _nm for names
      - _key for date keys in YYYYMMDD format
      - _txt for text strings
      
      Key Features:
      - Separate records for each pattern (445, 454, 544)
      - Pattern-specific month boundaries and metrics
      - Derived from dim_trade_date to ensure consistency
      - Trade months follow retail calendar conventions with Sunday start weeks
      
      Pattern Details:
      - 445: Each quarter has 4-4-5 week months (13 weeks per quarter)
      - 454: Each quarter has 4-5-4 week months (13 weeks per quarter)  
      - 544: Each quarter has 5-4-4 week months (13 weeks per quarter)
      
      Primary Key Logic:
      - trade_month_pattern_key: Unique across all patterns (YYYYMM###)
      - trade_month_key: Pattern-specific key (YYYYMM format)
    
    columns:
      # Primary keys
      - name: trade_month_pattern_key
        description: "Unique primary key across all patterns as trade_year * 10000 + trade_month * 100 + pattern (e.g., 20230445 for 2023 January 445 pattern)"
        data_tests:
          - unique
          - not_null

      - name: trade_month_key
        description: "Pattern-specific key as trade year * 100 + trade month number (e.g., 202301 for 2023 January)"
        data_tests:
          - not_null

      # Pattern identifier
      - name: trade_pattern_txt
        description: "Trade calendar pattern identifier (445, 454, or 544)"
        data_tests:
          - not_null
          - accepted_values:
              values: ['445', '454', '544']

      # Core trade calendar
      - name: trade_year_num
        description: "Trade year (same for all patterns)"
        data_tests:
          - not_null

      - name: trade_month_num
        description: "Trade month number within the year (1-12)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

      - name: trade_month_nm
        description: "Trade month name (January through December)"
        data_tests:
          - not_null
          - accepted_values:
              values: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

      - name: trade_quarter_num
        description: "Trade quarter number (1-4)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4]

      - name: trade_quarter_nm
        description: "Trade quarter name (First, Second, Third, Fourth)"
        data_tests:
          - not_null
          - accepted_values:
              values: ['First', 'Second', 'Third', 'Fourth']

      - name: month_in_quarter_num
        description: "Position of month within the quarter (1-3)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3]

      # Month boundaries
      - name: trade_month_start_dt
        description: "First day (Sunday) of the trade month for this pattern"
        data_tests:
          - not_null

      - name: trade_month_end_dt
        description: "Last day (Saturday) of the trade month for this pattern"
        data_tests:
          - not_null

      - name: trade_month_start_key
        description: "Date key (YYYYMMDD) of the trade month's first day"
        data_tests:
          - not_null

      - name: trade_month_end_key
        description: "Date key (YYYYMMDD) of the trade month's last day"
        data_tests:
          - not_null

      # Quarter and month descriptions
      - name: trade_quarter_txt
        description: "Trade quarter text (Q1, Q2, Q3, Q4)"
        data_tests:
          - not_null
          - accepted_values:
              values: ['Q1', 'Q2', 'Q3', 'Q4']

      - name: trade_month_year_nm
        description: "Month and year description (e.g., 'January 2023')"
        data_tests:
          - not_null

      - name: trade_month_year_abbr
        description: "Abbreviated month and year (e.g., 'Jan 2023')"
        data_tests:
          - not_null

      - name: trade_year_month_txt
        description: "ISO-style year-month text (e.g., '2023-01')"
        data_tests:
          - not_null

      - name: trade_month_abbr
        description: "Three-letter month abbreviation (Jan, Feb, etc.)"
        data_tests:
          - not_null
          - accepted_values:
              values: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

      # Pattern-specific descriptions
      - name: trade_month_pattern_desc_txt
        description: "Full descriptive text including pattern (e.g., '445 Pattern: January 2023')"
        data_tests:
          - not_null

      - name: trade_month_pattern_code_txt
        description: "Coded text with pattern (e.g., 'TM01 2023 (445)')"
        data_tests:
          - not_null

      # Month metrics
      - name: days_in_month_num
        description: "Number of days in the trade month for this pattern"
        data_tests:
          - not_null

      - name: weeks_in_month_num
        description: "Number of weeks in the trade month for this pattern"
        data_tests:
          - not_null

      - name: first_week_of_month_num
        description: "Trade week number of the first week in this month"
        data_tests:
          - not_null

      - name: last_week_of_month_num
        description: "Trade week number of the last week in this month"
        data_tests:
          - not_null

      - name: expected_weeks_in_month_num
        description: "Expected number of weeks based on the pattern rules"
        data_tests:
          - not_null
          - accepted_values:
              values: [4, 5]

      - name: trade_week_span_txt
        description: "Descriptive text of week span (e.g., 'Weeks 1-4' or 'Week 5')"
        data_tests:
          - not_null

      # Flags
      - name: is_current_trade_month_flg
        description: "Flag indicating if this is the current trade month"
        data_tests:
          - not_null

      - name: is_prior_trade_month_flg
        description: "Flag indicating if this is the prior trade month"
        data_tests:
          - not_null

      - name: is_current_trade_year_flg
        description: "Flag indicating if this month is in the current trade year"
        data_tests:
          - not_null

      - name: is_past_trade_month_flg
        description: "Flag indicating if this trade month is in the past"
        data_tests:
          - not_null

      # Relative calculations
      - name: trade_months_ago_num
        description: "Number of trade months ago from current date (negative for future months)"
        data_tests:
          - not_null

      - name: trade_months_from_now_num
        description: "Number of trade months from current date (negative for past months)"
        data_tests:
          - not_null

      # Position metrics
      - name: trade_month_of_year_num
        description: "Month position in the trade year (1-12)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

      - name: trade_month_pct_of_year_num
        description: "Percentage of trade year completed as of this month (0.0-100.0)"
        data_tests:
          - not_null

      - name: trade_month_overall_num
        description: "Sequential trade month number within pattern since earliest trade month, useful for month-over-month calculations"
        data_tests:
          - not_null

      - name: trade_month_sort_num
        description: "Sorting helper for chronological ordering"
        data_tests:
          - not_null

      # ETL metadata
      - name: dw_deleted_flg
        description: "Soft delete flag"
        data_tests:
          - not_null

      - name: dw_synced_ts
        description: "Timestamp when record was created/updated"
        data_tests:
          - not_null

      - name: dw_source_nm
        description: "Source system name"
        data_tests:
          - not_null

      - name: create_user_id
        description: "User who created the record"
        data_tests:
          - not_null

      - name: create_timestamp
        description: "Timestamp when record was created"
        data_tests:
          - not_null

    data_tests:
      # Test that expected weeks matches actual weeks for each pattern
      - dbt_utils.expression_is_true:
          expression: "weeks_in_month_num = expected_weeks_in_month_num"
          config:
            error_if: ">0"

      # Test 445 pattern: months 1,2,4,5,7,8,10,11 have 4 weeks; 3,6,9,12 have 5 weeks
      - dbt_utils.expression_is_true:
          expression: |
            case 
              when trade_pattern_txt = '445' and month_in_quarter_num in (1, 2) then weeks_in_month_num = 4
              when trade_pattern_txt = '445' and month_in_quarter_num = 3 then weeks_in_month_num = 5
              else true
            end
          config:
            error_if: ">0"

      # Test 454 pattern: months 1,3,4,6,7,9,10,12 have 4 weeks; 2,5,8,11 have 5 weeks
      - dbt_utils.expression_is_true:
          expression: |
            case 
              when trade_pattern_txt = '454' and month_in_quarter_num in (1, 3) then weeks_in_month_num = 4
              when trade_pattern_txt = '454' and month_in_quarter_num = 2 then weeks_in_month_num = 5
              else true
            end
          config:
            error_if: ">0"

      # Test 544 pattern: months 1,4,7,10 have 5 weeks; 2,3,5,6,8,9,11,12 have 4 weeks
      - dbt_utils.expression_is_true:
          expression: |
            case 
              when trade_pattern_txt = '544' and month_in_quarter_num = 1 then weeks_in_month_num = 5
              when trade_pattern_txt = '544' and month_in_quarter_num in (2, 3) then weeks_in_month_num = 4
              else true
            end
          config:
            error_if: ">0"

      # Test that trade month end date is after start date
      - dbt_utils.expression_is_true:
          expression: "trade_month_end_dt > trade_month_start_dt"
          config:
            error_if: ">0"

      # Test that days in month is reasonable (minimum 28 days for 4-week months, maximum 35 days for 5-week months)
      - dbt_utils.expression_is_true:
          expression: "days_in_month_num between 28 and 35"
          config:
            error_if: ">0"

      # Test that trade month key matches year and month components for each pattern
      - dbt_utils.expression_is_true:
          expression: "trade_month_key = trade_year_num * 100 + trade_month_num"
          config:
            error_if: ">0"

      # Test that trade month pattern key is constructed correctly
      - dbt_utils.expression_is_true:
          expression: "trade_month_pattern_key = trade_year_num * 10000 + trade_month_num * 100 + trade_pattern_txt::int"
          config:
            error_if: ">0"

      # Test that all three patterns exist for each trade year and month combination
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - trade_year_num
            - trade_month_num
            - trade_pattern_txt

      # Test that week span is within reasonable bounds (1-53)
      - dbt_utils.expression_is_true:
          expression: |
            first_week_of_month_num between 1 and 53
            and last_week_of_month_num between 1 and 53
            and last_week_of_month_num >= first_week_of_month_num
          config:
            error_if: ">0"
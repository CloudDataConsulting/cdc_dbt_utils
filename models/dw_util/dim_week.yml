version: 2

models:
  - name: dim_week
    description: |
      Calendar week dimension table containing one row per week, derived from dim_date for consistency.
      Provides week-level aggregations and attributes for standard calendar analysis at weekly granularity.
      
      Column naming follows CDC standards:
      - _dt for dates/timestamps
      - _num for numbers
      - _flg for boolean flags
      - _nm for names
      - _key for date keys in YYYYMMDD format
      - _txt for text strings
      - _abbr for abbreviations
      
      Key Features:
      - Primary key is week_key (the Sunday of each week in YYYYMMDD format)
      - Weeks run Sunday to Saturday following standard US calendar conventions
      - Derived from dim_date to ensure consistency
      - Includes ISO week attributes for international standards
    
    columns:
      - name: week_key
        description: "Primary key using the week_start_key (Sunday in YYYYMMDD format)"
        data_tests:
          - unique
          - not_null
      
      # Week boundaries
      - name: week_start_dt
        description: "First day (Sunday) of the week"
        data_tests:
          - not_null
      
      - name: week_end_dt
        description: "Last day (Saturday) of the week"
        data_tests:
          - not_null
      
      - name: week_start_key
        description: "Date key (YYYYMMDD) of the week's Sunday (same as primary key)"
        data_tests:
          - not_null
      
      - name: week_end_key
        description: "Date key (YYYYMMDD) of the week's Saturday"
        data_tests:
          - not_null
      
      # Core identifiers
      - name: year_num
        description: "Calendar year"
        data_tests:
          - not_null
      
      - name: week_num
        description: "Week number within the year (1-53)"
        data_tests:
          - not_null
      
      - name: week_of_year_num
        description: "Week number within the year (same as week_num)"
        data_tests:
          - not_null
      
      - name: week_of_quarter_num
        description: "Week number within the quarter (1-14)"
        data_tests:
          - not_null
      
      - name: week_overall_num
        description: "Sequential week number since 1970-01-01, useful for week-over-week calculations"
        data_tests:
          - not_null
      
      # Month attributes
      - name: month_num
        description: "Month number (1-12) - most common month in the week"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      
      - name: month_nm
        description: "Month name - most common month in the week"
        data_tests:
          - not_null
      
      - name: month_abbr
        description: "Three-letter month abbreviation"
        data_tests:
          - not_null
      
      - name: week_of_month_num
        description: "Week number within the month (1-6)"
        data_tests:
          - not_null
      
      # Quarter attributes
      - name: quarter_num
        description: "Quarter number (1-4)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4]
      
      - name: quarter_nm
        description: "Quarter name (First, Second, Third, Fourth)"
        data_tests:
          - not_null
      
      # Week metrics
      - name: days_in_week_num
        description: "Number of days in the week (7 for complete weeks, may be less for boundary weeks)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7]
      
      # ISO week attributes
      - name: iso_year_num
        description: "ISO week year (may differ from calendar year for dates near year boundaries)"
        data_tests:
          - not_null
      
      - name: iso_week_of_year_txt
        description: "ISO week of year in YYYY-WNN format (e.g., '2023-W01')"
        data_tests:
          - not_null
      
      - name: iso_week_overall_num
        description: "Sequential ISO week number since 1970-01-01"
        data_tests:
          - not_null
      
      # Display columns
      - name: week_year_txt
        description: "Week and year text (e.g., 'W01 2023')"
        data_tests:
          - not_null
      
      - name: year_week_txt
        description: "Year and week text (e.g., '2023-W01')"
        data_tests:
          - not_null
      
      - name: month_year_nm
        description: "Month and year name (e.g., 'January 2023')"
        data_tests:
          - not_null
      
      - name: week_of_month_nm
        description: "Week of month description (e.g., 'Week 2 of January')"
        data_tests:
          - not_null
      
      # Current period flags
      - name: is_current_week_flg
        description: "Flag indicating if this is the current week"
        data_tests:
          - not_null
      
      - name: is_prior_week_flg
        description: "Flag indicating if this is the prior week"
        data_tests:
          - not_null
      
      - name: is_current_year_flg
        description: "Flag indicating if this week is in the current year"
        data_tests:
          - not_null
      
      - name: is_past_week_flg
        description: "Flag indicating if this week has ended (week_end_dt < current date)"
        data_tests:
          - not_null
      
      # Relative metrics
      - name: weeks_ago_num
        description: "Number of weeks ago from current date (negative for future weeks)"
        data_tests:
          - not_null
      
      # Metadata columns
      - name: dw_synced_ts
        description: "Timestamp when record was created/updated"
        data_tests:
          - not_null
      
      - name: dw_source_nm
        description: "Source system name (always 'dim_week')"
        data_tests:
          - not_null
      
      - name: create_user_id
        description: "User who created the record"
        data_tests:
          - not_null
      
      - name: create_timestamp
        description: "Timestamp when record was created"
        data_tests:
          - not_null
    
    data_tests:
      # Test that week key matches the start key
      - dbt_utils.expression_is_true:
          expression: "week_key = week_start_key"
          config:
            error_if: ">0"
      
      # Test that week boundaries are correct (Sunday to Saturday)
      - dbt_utils.expression_is_true:
          expression: "dayofweek(week_start_dt) = 0"  # Sunday
          config:
            error_if: ">0"
      
      - dbt_utils.expression_is_true:
          expression: "dayofweek(week_end_dt) = 6 or days_in_week_num < 7"  # Saturday or partial week
          config:
            error_if: ">0"
      
      # Test that week end date is 6 days after start date for complete weeks
      - dbt_utils.expression_is_true:
          expression: "datediff(day, week_start_dt, week_end_dt) = days_in_week_num - 1"
          config:
            error_if: ">0"